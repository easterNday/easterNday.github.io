import{_ as a,c as e,o as n,a as l}from"./app.536cdada.js";const g=JSON.parse('{"title":"内核编译脚本","description":"","frontmatter":{},"headers":[{"level":2,"title":"内核编译流程","slug":"内核编译流程","link":"#内核编译流程","children":[{"level":3,"title":"简易配置脚本","slug":"简易配置脚本","link":"#简易配置脚本","children":[]}]},{"level":2,"title":"设置编译链环境","slug":"设置编译链环境","link":"#设置编译链环境","children":[]},{"level":2,"title":"一些参考脚本","slug":"一些参考脚本","link":"#一些参考脚本","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"Topic/Android/Kernel/How to compile a kernel/3.Start compile.md","lastUpdated":1678597845000}'),s={name:"Topic/Android/Kernel/How to compile a kernel/3.Start compile.md"},o=l(`<h1 id="内核编译脚本" tabindex="-1">内核编译脚本 <a class="header-anchor" href="#内核编译脚本" aria-hidden="true">#</a></h1><blockquote><p>本教程将基于小米 10S 的内核源码进行实例，其他型号的手机请自行寻找内核源码。具体内容可以参考我的<a href="https://github.com/DogDayAndroid/KSU_Thyme_BuildBot" target="_blank" rel="noreferrer">内核编译项目</a>。</p></blockquote><p>自此，我们已经完成了<strong>内核源码</strong>和<strong>编译工具链</strong>的获取，那么接下来就让我们开始内核的编译吧。</p><h2 id="内核编译流程" tabindex="-1">内核编译流程 <a class="header-anchor" href="#内核编译流程" aria-hidden="true">#</a></h2><p>内核编译流程其实只有两步：</p><ol><li>生成对应设备的配置文件 <code>make &lt;theDefConfig&gt;</code></li><li>开始编译内核 <code>make</code></li></ol><h3 id="简易配置脚本" tabindex="-1">简易配置脚本 <a class="header-anchor" href="#简易配置脚本" aria-hidden="true">#</a></h3><p>首先给出一个最基础的配置脚本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-j</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">nproc</span><span style="color:#C3E88D;"> --all</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">O=out </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">ARCH=arm64 </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">CROSS_COMPILE=aarch64-linux-gnu- </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">CC=clang </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">CROSS_COMPILE_COMPAT=arm-linux-gnueabi- </span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>该脚本是在使用上一节的三个工具时才可以正常使用的，如果您使用其他工具可以需要进行其他配置。</p></blockquote><p>下面是一些参数对应的说明：</p><table><thead><tr><th>参数</th><th>说明</th><th>一般参数</th></tr></thead><tbody><tr><td><code>CC</code></td><td>指定使用的编译器，因为 <code>make</code> 默认使用 <code>gcc</code>，因此实际上只有你在使用 <code>clang</code> 进行编译的时候才会使用该参数</td><td><code>clang</code></td></tr><tr><td><code>CROSS_COMPILE</code></td><td>您的主要交叉编译链工具，如果你在使用谷歌的 gcc 4.9，请指定参数为 <code>aarch64-linux-android-</code>，32 位同理</td><td><code>aarch64-linux-gnu-</code></td></tr><tr><td><code>CLANG_TRIPLE</code></td><td>只在使用 <code>clang</code> 进行编译的时候才需要使用，用于指定当 <code>clang</code> 不生效时候使用的工具链，但在使用上一节我们提到的工具中基本不用设置该参数</td><td><code>aarch64-linux-gnu-</code></td></tr><tr><td><code>CROSS_COMPILE_ARM32</code></td><td>只在编译 32 位内核或者带 vdso 补丁的内核时需要指定该参数</td><td><code>arm-linux-gnueabi-</code></td></tr><tr><td><code>CROSS_COMPILE_COMPAT</code></td><td>类似于参数 <code>CROSS_COMPILE_ARM32</code> ，但内核版本为 4.19 及更新版本应使用本参数而非 <code>CROSS_COMPILE_ARM32</code></td><td><code>arm-linux-gnueabi-</code></td></tr></tbody></table><p>更多参数介绍可以参考一下<a href="https://github.com/Neutron-Toolchains/clang-build-catalogue#building-linux" target="_blank" rel="noreferrer">Neutron-clang 的编译说明</a>，里面对于一些参数的说明比较详细。</p><blockquote><p>正常情况下，clang 是无法独立完成内核编译的，需要 gcc 的辅助。但使用上一节介绍的几种工具并不需要并不需要单独指定 <code>gcc</code> 来辅助编译。</p></blockquote><p>在内核源码目录按照顺序执行该简易脚本即可开始编译，但通常来说你并不会成功，因为你的编译链环境并未设置正确。</p><h2 id="设置编译链环境" tabindex="-1">设置编译链环境 <a class="header-anchor" href="#设置编译链环境" aria-hidden="true">#</a></h2><p>最简单的设置环境办法就是将编译链工具的路径添加到系统路径中，例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;absolute/path/to/ur/toolchains&gt;/bin:</span><span style="color:#A6ACCD;">$PATH</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 例如，您正在使用 neutron-clang</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># export PATH=&quot;home/user/toolchains/neutron-clang/bin:$PATH&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 其中的路径必须为绝对路径</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如果您在使用 <code>gcc</code>，可能还需要将 <code>gcc</code> 工具链的路径加入到环境变量中。</p></blockquote><h2 id="一些参考脚本" tabindex="-1">一些参考脚本 <a class="header-anchor" href="#一些参考脚本" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/DogDayAndroid/KSU_Thyme_BuildBot/blob/main/build.sh" target="_blank" rel="noreferrer">DogDayAndroid/KSU_Thyme_BuildBot</a>：我自己编译的内核使用的本地编译脚本。</li><li><a href="https://github.com/UtsavBalar1231/Drone-scripts" target="_blank" rel="noreferrer">UtsavBalar1231/Drone-scripts</a>：一个很多人使用的编译脚本，我的部分代码也是参考自这里。</li><li><a href="https://github.com/EndCredits/kernel_xiaomi_sm7250/blob/android-4.19-main/build.sh" target="_blank" rel="noreferrer">EndCredits/kernel_xiaomi_sm7250</a>：同样的一个编译脚本，但并未提供编译链，但是其中的脚本流程我也有参考。</li><li><a href="https://github.com/xiaoleGun/KernelSU_Action" target="_blank" rel="noreferrer">xiaoleGun/KernelSU_Action</a>：<code>KernelSU</code> 的编译脚本，同样有参考。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/Neutron-Toolchains/clang-build-catalogue#building-linux" target="_blank" rel="noreferrer">Neutron-clang 的编译说明</a></li><li><a href="https://www.akr-developers.com/d/129" target="_blank" rel="noreferrer">[内核向] 交叉编译器的选择</a></li><li><a href="https://www.akr-developers.com/d/121" target="_blank" rel="noreferrer">[白话文版] ClangBuiltLinux Clang 的使用</a></li></ul>`,23),t=[o];function r(c,p,i,d,h,u){return n(),e("div",null,t)}const D=a(s,[["render",r]]);export{g as __pageData,D as default};
