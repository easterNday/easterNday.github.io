import{_ as a,c as t,o as e,a as l}from"./app.536cdada.js";const b=JSON.parse('{"title":"内核编译工具选取","description":"","frontmatter":{},"headers":[{"level":2,"title":"工具推荐","slug":"工具推荐","link":"#工具推荐","children":[]},{"level":2,"title":"Neutron-Clang 使用介绍","slug":"neutron-clang-使用介绍","link":"#neutron-clang-使用介绍","children":[]},{"level":2,"title":"ClangBuiltLinux","slug":"clangbuiltlinux","link":"#clangbuiltlinux","children":[]},{"level":2,"title":"阿菌•未霜 Clang/LLVM Toolchain with Binutils","slug":"阿菌•未霜-clang-llvm-toolchain-with-binutils","link":"#阿菌•未霜-clang-llvm-toolchain-with-binutils","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"Topic/Android/Kernel/How to compile a kernel/2.Get toolchains.md","lastUpdated":1678597470000}'),n={name:"Topic/Android/Kernel/How to compile a kernel/2.Get toolchains.md"},r=l(`<h1 id="内核编译工具选取" tabindex="-1">内核编译工具选取 <a class="header-anchor" href="#内核编译工具选取" aria-hidden="true">#</a></h1><blockquote><p>本教程将基于小米 10S 的内核源码进行实例，其他型号的手机请自行寻找内核源码。具体内容可以参考我的<a href="https://github.com/DogDayAndroid/KSU_Thyme_BuildBot" target="_blank" rel="noreferrer">内核编译项目</a>。</p></blockquote><p>通过上一节的知识，我们已经获取到内核源码。</p><p>强烈推荐您学习<a href="https://www.akr-developers.com/d/129" target="_blank" rel="noreferrer">[内核向] 交叉编译器的选择</a>以及<a href="https://www.akr-developers.com/d/121" target="_blank" rel="noreferrer">[白话文版] ClangBuiltLinux Clang 的使用</a>来学习工具链的配置。</p><p>同时可以配合<a href="https://github.com/Neutron-Toolchains/clang-build-catalogue/blob/main/README.md" target="_blank" rel="noreferrer">neutron-clang 的说明文档</a>来进行编译参数配置。</p><h2 id="工具推荐" tabindex="-1">工具推荐 <a class="header-anchor" href="#工具推荐" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/Neutron-Toolchains/clang-build-catalogue" target="_blank" rel="noreferrer">neutron-clang</a>：这是为内核开发构建的 LLVM 和 Clang 编译器工具链。构建始终是从最新的 LLVM 源代码而不是稳定版本构建的，<s>因此无法保证完全的稳定性</s>。</li><li><a href="https://gitea.com/Mandi-Sa/clang" target="_blank" rel="noreferrer">阿菌•未霜 Clang/LLVM Toolchain with Binutils</a>：这是一个预构建的工具链，构建始终来自最新的 LLVM 和 Binutils 源而不是稳定版本，因此无法保证完全的稳定性。它是用 Full LTO、PGO 和 BOLT 构建的，以尽可能减少编译时间。</li><li><a href="https://github.com/ClangBuiltLinux/tc-build" target="_blank" rel="noreferrer">ClangBuiltLinux/tc-build</a>：类似前两个工具，但是这个工具需要自己在本地从 LLVM 的源码进行构建，但编译时间较长。</li></ul><p>除此之外，一个比较保险的方法是从预编译内核机器的 <code>/proc/config.gz</code> 提取\`，需要对应版本的<a href="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+refs" target="_blank" rel="noreferrer">交叉编译器</a>以及 <a href="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/refs/heads/master" target="_blank" rel="noreferrer">Clang</a>，自行选择合适版本下载即可，通过这种方式编译出来的内核一般是不会存在错误的。</p><h2 id="neutron-clang-使用介绍" tabindex="-1">Neutron-Clang 使用介绍 <a class="header-anchor" href="#neutron-clang-使用介绍" aria-hidden="true">#</a></h2><p>这是为内核开发构建的 LLVM 和 Clang 编译器工具链。构建始终是从最新的 LLVM 源代码而不是稳定版本构建的，因此不能保证完全的稳定性。目前该编译链工具使用 <code>AntMan</code> 来同步工具，具体使用方法如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/neutron-clang</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/neutron-clang</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;(</span><span style="color:#FFCB6B;">curl</span><span style="color:#C3E88D;"> -s </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman</span><span style="color:#89DDFF;">&quot;)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span></span>
<span class="line"></span></code></pre></div><p>一些更多的 <code>AntMan</code> 命令：</p><table><thead><tr><th>功能</th><th>对应命令</th></tr></thead><tbody><tr><td>同步最新的工具链构建</td><td><code>./antman -S</code> 或 <code>./antman -S=latest</code></td></tr><tr><td>同步特定的工具链版本</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr><tr><td>检查更新</td><td><code>./antman -U</code></td></tr><tr><td>检查更新和同步更新</td><td><code>./antman -Uy</code></td></tr><tr><td>同步特定更新</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr><tr><td>删除同步构建</td><td><code>./antman -D</code></td></tr><tr><td>显示有关同步构建的信息</td><td><code>./antman -I</code></td></tr><tr><td>同步特定的工具链版本</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr></tbody></table><blockquote><p>如果需要更多细节介绍，请运行 <code>./antman --help</code> 获取。</p></blockquote><h2 id="clangbuiltlinux" tabindex="-1">ClangBuiltLinux <a class="header-anchor" href="#clangbuiltlinux" aria-hidden="true">#</a></h2><p>如果您想要使用这个工具链的话，那么其中的编译工具则需要你自行编译，对应的编译脚本为 <a href="https://github.com/ClangBuiltLinux/tc-build" target="_blank" rel="noreferrer">ClangBuiltLinux/tc-build</a>。</p><p>诚然，自行编译确实是一件造轮子且费时费力的方法，但是通过这种方式编译出来的工具是最适合您的系统的，不会发生其他的编译中的关于 <code>glibc</code> 等方面的错误。</p><h2 id="阿菌•未霜-clang-llvm-toolchain-with-binutils" tabindex="-1">阿菌•未霜 Clang/LLVM Toolchain with Binutils <a class="header-anchor" href="#阿菌•未霜-clang-llvm-toolchain-with-binutils" aria-hidden="true">#</a></h2><p>这是一个预构建的工具链，构建始终来自最新的 LLVM 和 Binutils 源而不是稳定版本，因此无法保证完全的稳定性。它是用 Full LTO、PGO 和 BOLT 构建的，以尽可能减少编译时间。</p><p>其编译链工具存储在：</p><ul><li><a href="https://github.com/Mandi-Sa/clang" title="GitHub" target="_blank" rel="noreferrer">GitHub</a>：仅用于发布预构建的压缩文件（*.7z）</li><li><a href="https://gitea.com/Mandi-Sa/clang" title="Gitea" target="_blank" rel="noreferrer">Gitea</a>：仅用于存储预构建的二进制文件（Current AR Archive、ELF 64-bit LSB shared object 存储在 LFS）</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://www.akr-developers.com/d/129" target="_blank" rel="noreferrer">[内核向] 交叉编译器的选择</a></li><li><a href="https://www.akr-developers.com/d/121" target="_blank" rel="noreferrer">[白话文版] ClangBuiltLinux Clang 的使用</a></li></ul>`,23),o=[r];function s(i,c,d,p,h,u){return e(),t("div",null,o)}const m=a(n,[["render",s]]);export{b as __pageData,m as default};
