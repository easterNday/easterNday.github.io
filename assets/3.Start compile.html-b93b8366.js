import{_ as s,M as r,p as l,q as d,R as e,t as n,N as t,a1 as o}from"./framework-96b046e1.js";const c={},i=e("h1",{id:"内核编译脚本",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内核编译脚本","aria-hidden":"true"},"#"),n(" 内核编译脚本")],-1),u={href:"https://github.com/DogDayAndroid/KSU_Thyme_BuildBot",target:"_blank",rel:"noopener noreferrer"},p=o(`<p>自此，我们已经完成了<strong>内核源码</strong>和<strong>编译工具链</strong>的获取，那么接下来就让我们开始内核的编译吧。</p><h2 id="内核编译流程" tabindex="-1"><a class="header-anchor" href="#内核编译流程" aria-hidden="true">#</a> 内核编译流程</h2><p>内核编译流程其实只有两步：</p><ol><li>生成对应设备的配置文件 <code>make &lt;theDefConfig&gt;</code></li><li>开始编译内核 <code>make</code></li></ol><h3 id="简易配置脚本" tabindex="-1"><a class="header-anchor" href="#简易配置脚本" aria-hidden="true">#</a> 简易配置脚本</h3><p>首先给出一个最基础的配置脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">args</span><span class="token operator">=</span><span class="token string">&quot;-j<span class="token variable"><span class="token variable">$(</span>nproc <span class="token parameter variable">--all</span><span class="token variable">)</span></span> \\
O=out \\
ARCH=arm64 \\
CROSS_COMPILE=aarch64-linux-gnu- \\
CC=clang \\
CROSS_COMPILE_COMPAT=arm-linux-gnueabi- &quot;</span>
<span class="token function">make</span> <span class="token variable">\${args}</span> <span class="token operator">&lt;</span>config name<span class="token operator">&gt;</span>
<span class="token function">make</span> <span class="token variable">\${args}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该脚本是在使用上一节的三个工具时才可以正常使用的，如果您使用其他工具可以需要进行其他配置。</p></blockquote><p>下面是一些参数对应的说明：</p><table><thead><tr><th>参数</th><th>说明</th><th>一般参数</th></tr></thead><tbody><tr><td><code>CC</code></td><td>指定使用的编译器，因为 <code>make</code> 默认使用 <code>gcc</code>，因此实际上只有你在使用 <code>clang</code> 进行编译的时候才会使用该参数</td><td><code>clang</code></td></tr><tr><td><code>CROSS_COMPILE</code></td><td>您的主要交叉编译链工具，如果你在使用谷歌的 gcc 4.9，请指定参数为 <code>aarch64-linux-android-</code>，32 位同理</td><td><code>aarch64-linux-gnu-</code></td></tr><tr><td><code>CLANG_TRIPLE</code></td><td>只在使用 <code>clang</code> 进行编译的时候才需要使用，用于指定当 <code>clang</code> 不生效时候使用的工具链，但在使用上一节我们提到的工具中基本不用设置该参数</td><td><code>aarch64-linux-gnu-</code></td></tr><tr><td><code>CROSS_COMPILE_ARM32</code></td><td>只在编译 32 位内核或者带 vdso 补丁的内核时需要指定该参数</td><td><code>arm-linux-gnueabi-</code></td></tr><tr><td><code>CROSS_COMPILE_COMPAT</code></td><td>类似于参数 <code>CROSS_COMPILE_ARM32</code> ，但内核版本为 4.19 及更新版本应使用本参数而非 <code>CROSS_COMPILE_ARM32</code></td><td><code>arm-linux-gnueabi-</code></td></tr></tbody></table>`,10),h={href:"https://github.com/Neutron-Toolchains/clang-build-catalogue#building-linux",target:"_blank",rel:"noopener noreferrer"},b=o(`<blockquote><p>正常情况下，clang 是无法独立完成内核编译的，需要 gcc 的辅助。但使用上一节介绍的几种工具并不需要并不需要单独指定 <code>gcc</code> 来辅助编译。</p></blockquote><p>在内核源码目录按照顺序执行该简易脚本即可开始编译，但通常来说你并不会成功，因为你的编译链环境并未设置正确。</p><h2 id="设置编译链环境" tabindex="-1"><a class="header-anchor" href="#设置编译链环境" aria-hidden="true">#</a> 设置编译链环境</h2><p>最简单的设置环境办法就是将编译链工具的路径添加到系统路径中，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;&lt;absolute/path/to/ur/toolchains&gt;/bin:<span class="token environment constant">$PATH</span>&quot;</span>
<span class="token comment"># 例如，您正在使用 neutron-clang</span>
<span class="token comment"># export PATH=&quot;home/user/toolchains/neutron-clang/bin:$PATH&quot;</span>
<span class="token comment"># 其中的路径必须为绝对路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果您在使用 <code>gcc</code>，可能还需要将 <code>gcc</code> 工具链的路径加入到环境变量中。</p></blockquote><h2 id="一些参考脚本" tabindex="-1"><a class="header-anchor" href="#一些参考脚本" aria-hidden="true">#</a> 一些参考脚本</h2>`,7),_={href:"https://github.com/DogDayAndroid/KSU_Thyme_BuildBot/blob/main/build.sh",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/UtsavBalar1231/Drone-scripts",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/EndCredits/kernel_xiaomi_sm7250/blob/android-4.19-main/build.sh",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/xiaoleGun/KernelSU_Action",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"KernelSU",-1),f=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),n(" 参考")],-1),x={href:"https://github.com/Neutron-Toolchains/clang-build-catalogue#building-linux",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.akr-developers.com/d/129",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.akr-developers.com/d/121",target:"_blank",rel:"noopener noreferrer"};function O(A,q){const a=r("ExternalLinkIcon");return l(),d("div",null,[i,e("blockquote",null,[e("p",null,[n("本教程将基于小米 10S 的内核源码进行实例，其他型号的手机请自行寻找内核源码。具体内容可以参考我的"),e("a",u,[n("内核编译项目"),t(a)]),n("。")])]),p,e("p",null,[n("更多参数介绍可以参考一下"),e("a",h,[n("Neutron-clang 的编译说明"),t(a)]),n("，里面对于一些参数的说明比较详细。")]),b,e("ul",null,[e("li",null,[e("a",_,[n("DogDayAndroid/KSU_Thyme_BuildBot"),t(a)]),n("：我自己编译的内核使用的本地编译脚本。")]),e("li",null,[e("a",g,[n("UtsavBalar1231/Drone-scripts"),t(a)]),n("：一个很多人使用的编译脚本，我的部分代码也是参考自这里。")]),e("li",null,[e("a",m,[n("EndCredits/kernel_xiaomi_sm7250"),t(a)]),n("：同样的一个编译脚本，但并未提供编译链，但是其中的脚本流程我也有参考。")]),e("li",null,[e("a",k,[n("xiaoleGun/KernelSU_Action"),t(a)]),n("："),v,n(" 的编译脚本，同样有参考。")])]),f,e("ul",null,[e("li",null,[e("a",x,[n("Neutron-clang 的编译说明"),t(a)])]),e("li",null,[e("a",C,[n("[内核向] 交叉编译器的选择"),t(a)])]),e("li",null,[e("a",S,[n("[白话文版] ClangBuiltLinux Clang 的使用"),t(a)])])])])}const E=s(c,[["render",O],["__file","3.Start compile.html.vue"]]);export{E as default};
