import{$ as i,U as a,S as s,as as t}from"./chunks/framework.7ON99jD9.js";const u=JSON.parse('{"title":"使用 .gitignore 忽略文件","description":"","frontmatter":{},"headers":[],"relativePath":"Application/Git/Command/Git_Ignore.md","filePath":"Application/Git/Command/Git_Ignore.md","lastUpdated":1707135538000}'),e={name:"Application/Git/Command/Git_Ignore.md"},n=t('<h1 id="使用-gitignore-忽略文件" tabindex="-1">使用 .gitignore 忽略文件 <a class="header-anchor" href="#使用-gitignore-忽略文件" aria-label="Permalink to &quot;使用 .gitignore 忽略文件&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>在使用Git进行版本控制时，有时候我们会遇到这样的情况：一些本应被<code>.gitignore</code>文件忽略的文件，在添加该文件之前已经被提交到了Git仓库中。为了从远程仓库移除这些文件并确保它们在未来不受Git追踪，我们需要执行一系列的Git命令来清理缓存和更新远程仓库。</p><h3 id="步骤详解" tabindex="-1">步骤详解： <a class="header-anchor" href="#步骤详解" aria-label="Permalink to &quot;步骤详解：&quot;">​</a></h3><ol><li><p><strong>删除缓存中的已跟踪文件</strong></p><p>首先，运行以下命令来从缓存中移除所有已跟踪但应被忽略的文件（包括子目录）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>这个命令会将工作目录下的所有文件从Git索引（缓存）中移除，但不会影响实际工作区的文件内容。</p></li><li><p><strong>重新添加所有修改</strong></p><p>紧接着，你需要重新添加所有改动，这样Git就会根据新的<code>.gitignore</code>规则决定哪些文件应该被包含在内：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></li><li><p><strong>提交更改</strong></p><p>创建一个新的提交记录这次变动，用合适的提交信息描述这次操作的目的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chore: 清理缓存并应用新的.gitignore规则&quot;</span></span></code></pre></div></li><li><p><strong>推送到远程仓库</strong></p><p>最后，将这个包含新提交的分支推送到远程仓库，从而同步你的更改：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div></li></ol><h3 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h3><ul><li>上述步骤会将所有本地的、未被<code>.gitignore</code>排除且已存在于缓存中的文件从Git历史中移除（仅限于后续提交）。原有提交历史中的文件仍会存在。</li><li>在推送至共享仓库前，请务必与团队成员沟通确认，以免影响其他开发者的本地环境或造成不必要的麻烦。</li></ul><p>通过以上步骤，你成功地从Git管理中移除了那些不应被追踪的旧文件，并确保了<code>.gitignore</code>规则正确生效。这有助于保持项目仓库的整洁以及提升团队协作效率。</p>',8),l=[n];function p(o,h,d,r,c,g){return s(),a("div",null,l)}const b=i(e,[["render",p]]);export{u as __pageData,b as default};
