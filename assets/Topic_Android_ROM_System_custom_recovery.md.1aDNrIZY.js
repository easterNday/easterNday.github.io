import{_ as s,o as n,c as a,R as o}from"./chunks/framework.iP_g6UYo.js";const F=JSON.parse('{"title":"自定义 Recovery","description":"","frontmatter":{},"headers":[],"relativePath":"Topic/Android/ROM/System/custom_recovery.md","filePath":"Topic/Android/ROM/System/custom_recovery.md","lastUpdated":1700387532000}'),p={name:"Topic/Android/ROM/System/custom_recovery.md"},l=o(`<h1 id="自定义-recovery" tabindex="-1">自定义 Recovery <a class="header-anchor" href="#自定义-recovery" aria-label="Permalink to &quot;自定义 Recovery&quot;">​</a></h1><p><code>Recovery</code> 模式是 <code>Android</code> 系统的一种特殊模式，它允许用户执行一些在正常模式下无法执行的操作，例如：</p><ul><li>安装或升级 <code>Android</code> 系统</li><li>恢复出厂设置</li><li>清除缓存</li><li>格式化 SD 卡</li><li>刷入第三方 ROM</li></ul><p><code>Recovery</code> 模式由一个带有 <code>RAM</code> 磁盘的 <code>Linux</code> 内核组成，该内核位于与主 <code>Android</code> 系统不同的分区上。</p><p>如果您想获得更多功能，例如刷入第三方 <code>ROM</code>，则可以刷入第三方 <code>Recovery</code>。第三方 <code>Recovery</code> 通常比原生 <code>Recovery</code> 具有更多功能，但也可能不稳定。</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在我们完成了第三方系统编译，我们常常需要借助第三方 <code>Recovery</code> 来将系统刷入。</p><p>而同时，由于大部分系统自带的 <code>Recovery</code> 功能较为简陋，我们常常需要将第三方 <code>Recovery</code> 持久化到我们的设备内部，方便下一次刷写新系统。</p><p>那么有没有一种办法，可以使得我们将第三方 <code>Recovery</code> 直接集成到我们编译好的系统中呢？</p><p>查阅了很多网上的资料，我发现在 <code>TWRP</code> 老版本中确实存在过一段时间，可以和 <code>Omini</code> 系统一同编译并且直接集成到系统的办法。但是对于目前的新系统、新设备来说，这似乎是不可行的，我无法使用原来的办法直接在编译的时候集成到我的系统镜像、刷机包中。</p><p>与此同时，我尝试开始研究编译、使用 <code>TWRP</code> 的兄弟 <code>OrangeFox</code>，首先我参考其官方文档 <a href="https://wiki.orangefox.tech/en/dev/building" target="_blank" rel="noreferrer">Building OrangeFox</a> 编译了一份 <code>Recovery</code>，并且采用<strong>临时启动</strong>和<strong>刷入刷机包固化</strong>两种方式使用了 <code>OrangeFox Recovery</code>。</p><p>通过研究了一下 <code>OrangeFox Recovery</code> 的固化脚本，结合安卓的编译打包流程，我另辟蹊径实现了刷机包自定义 <code>Recovery</code> 的功能。</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><p>在 <code>Android</code> 系统编译过程中，通常是先将系统各个部分编译为镜像，随后再将这些镜像整理到一起打包为一个完整的刷机包。而我们的 <code>Recovery</code> 通常是单独的一个分区或是集成在 <code>Boot</code> 分区中，因此我们只需要将这部分进行替换即可。</p><p>本节只实现了 <code>Recovery</code> 在 <code>Boot</code> 分区中的系统编译时候的自定义。</p><p>但是通常 <code>Boot.img</code> 中不只有 <code>Recovery</code> 的内容，还存在一些其他用于系统启动引导的内容，因此我们需要对其进行解包打包修改。</p><h3 id="解包、打包" tabindex="-1">解包、打包 <a class="header-anchor" href="#解包、打包" aria-label="Permalink to &quot;解包、打包&quot;">​</a></h3><p>首先我们需要查看一下 <code>OrangeFox Recovery</code> 的 <code>Recovery</code> 固化脚本， 我将其中的主要步骤已经标注出来的，其中 <code>recovery.img</code> 就是我们对应的 <code>Recovery</code> 镜像，使用的解包打包工具为 <code>MagiskBoot</code>，固化部分代码如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># a/META-INF/com/google/android/update-binary</span></span>
<span class="line highlighted"><span style="color:#B392F0;">magiskboot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unpack</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">recovery.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># deal with ramdisk cpio</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ramdisk.cpio&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">abort</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;- Error extracting the OrangeFox ramdisk. Quitting!&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span>
<span class="line highlighted"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk.cpio</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk-ofrp.cpio</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk.cpio</span></span>
<span class="line"><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kernel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dtb</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kernel_dtb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># deal with both slots</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> _a _b; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ui_print</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;- Running boot image patcher on slot </span><span style="color:#E1E4E8;">$name$slot</span><span style="color:#9ECBFF;">...&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># dump the partition and unpack</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">dd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bs=</span><span style="color:#79B8FF;">1048576</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">if=</span><span style="color:#E1E4E8;">$target$slot </span><span style="color:#9ECBFF;">of=boot.img</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">magiskboot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unpack</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boot.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 其他步骤</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk-ofrp.cpio</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk.cpio</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">magiskboot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">repack</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boot.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">blockdev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--setrw</span><span style="color:#E1E4E8;"> $target$slot</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new-boot.img</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/dev/zero</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> $target$slot </span><span style="color:#F97583;">2&gt;</span><span style="color:#9ECBFF;">/dev/null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boot.img</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dtb</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kernel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new-boot.img</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ramdisk.cpio</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">header</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">magiskboot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cleanup</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;"># a/META-INF/com/google/android/update-binary</span></span>
<span class="line highlighted"><span style="color:#6F42C1;">magiskboot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unpack</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">recovery.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># deal with ramdisk cpio</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> [ </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ramdisk.cpio&quot;</span><span style="color:#24292E;"> ]; </span><span style="color:#D73A49;">then</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">abort</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;- Error extracting the OrangeFox ramdisk. Quitting!&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fi</span></span>
<span class="line highlighted"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk.cpio</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk-ofrp.cpio</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk.cpio</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kernel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dtb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kernel_dtb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># deal with both slots</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> _a _b; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ui_print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;- Running boot image patcher on slot </span><span style="color:#24292E;">$name$slot</span><span style="color:#032F62;">...&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># dump the partition and unpack</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bs=</span><span style="color:#005CC5;">1048576</span><span style="color:#24292E;"> </span><span style="color:#032F62;">if=</span><span style="color:#24292E;">$target$slot </span><span style="color:#032F62;">of=boot.img</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">magiskboot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unpack</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boot.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 其他步骤</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk-ofrp.cpio</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk.cpio</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">magiskboot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">repack</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boot.img</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">blockdev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--setrw</span><span style="color:#24292E;"> $target$slot</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new-boot.img</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/dev/zero</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> $target$slot </span><span style="color:#D73A49;">2&gt;</span><span style="color:#032F62;">/dev/null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boot.img</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dtb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kernel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new-boot.img</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ramdisk.cpio</span><span style="color:#24292E;"> </span><span style="color:#032F62;">header</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">magiskboot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cleanup</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><p>通过这段代码，我们可以看到 <code>OrangeFox Recovery</code> 的固化流程为:</p><ul><li><ol><li>利用 <code>MagiskBoot</code> 将第三方 <code>Recovery</code> 解包，并且只保留 <code>ramdisk.cpio</code> 文件;</li></ol></li><li><ol start="2"><li>从系统中提取出 <code>boot.img</code>;</li></ol></li><li><ol start="3"><li>将提取出来的 <code>boot.img</code> 解包;</li></ol></li><li><ol start="4"><li>利用第三方 <code>Recovery</code> 解包提取的 <code>ramdisk.cpio</code> 文件替换 <code>boot.img</code> 解包出来的 <code>ramdisk.cpio</code> 文件;</li></ol></li><li><ol start="5"><li>重新打包 <code>boot.img</code> 镜像;</li></ol></li><li><ol start="6"><li>写回原分区</li></ol></li></ul><h2 id="具体操作" tabindex="-1">具体操作 <a class="header-anchor" href="#具体操作" aria-label="Permalink to &quot;具体操作&quot;">​</a></h2><h3 id="修改打包流程" tabindex="-1">修改打包流程 <a class="header-anchor" href="#修改打包流程" aria-label="Permalink to &quot;修改打包流程&quot;">​</a></h3><p>如果将固化步骤类比增加到我们的系统编译过程中，在将编译好的各个镜像集中到一起组装成刷机包的前一个步骤里实现替换，就可以实现自定义 <code>Recovery</code> 的功能。</p><p>通过查看 <code>LineageOS</code> 源码，最终我找到了 <code>LineageOS</code> 中将镜像添加到刷机包中的部分代码，<code>boot.img</code> 相关的代码在 <code>build/make/tools/releasetools/add_img_to_target_files.py</code> 文件中:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">boot_image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> has_boot:</span></span>
<span class="line"><span style="color:#E1E4E8;">    banner(</span><span style="color:#9ECBFF;">&quot;boot&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    boot_images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.info_dict.get(</span><span style="color:#9ECBFF;">&quot;boot_images&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> boot_images </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        boot_images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;boot.img&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> index, b </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(boot_images.split()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        boot_image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> common.GetBootableImage(</span><span style="color:#9ECBFF;">&quot;IMAGES/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b, b, </span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp, </span><span style="color:#9ECBFF;">&quot;BOOT&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> boot_image:</span></span>
<span class="line"><span style="color:#E1E4E8;">            boot_image_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(</span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp, </span><span style="color:#9ECBFF;">&quot;IMAGES&quot;</span><span style="color:#E1E4E8;">, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            partitions[</span><span style="color:#9ECBFF;">&#39;boot&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boot_image_path</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(boot_image_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">            boot_image.WriteToDir(</span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> output_zip:</span></span>
<span class="line"><span style="color:#E1E4E8;">                boot_image.AddToZip(output_zip)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">boot_image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> has_boot:</span></span>
<span class="line"><span style="color:#24292E;">    banner(</span><span style="color:#032F62;">&quot;boot&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    boot_images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.info_dict.get(</span><span style="color:#032F62;">&quot;boot_images&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> boot_images </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        boot_images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;boot.img&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, b </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(boot_images.split()):</span></span>
<span class="line"><span style="color:#24292E;">        boot_image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> common.GetBootableImage(</span><span style="color:#032F62;">&quot;IMAGES/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b, b, </span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp, </span><span style="color:#032F62;">&quot;BOOT&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> boot_image:</span></span>
<span class="line"><span style="color:#24292E;">            boot_image_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.join(</span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp, </span><span style="color:#032F62;">&quot;IMAGES&quot;</span><span style="color:#24292E;">, b)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            partitions[</span><span style="color:#032F62;">&#39;boot&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boot_image_path</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(boot_image_path):</span></span>
<span class="line"><span style="color:#24292E;">            boot_image.WriteToDir(</span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> output_zip:</span></span>
<span class="line"><span style="color:#24292E;">                boot_image.AddToZip(output_zip)</span></span></code></pre></div><p>可以看到这段就是有关于 <code>boot.img</code> 打包到刷机包中的相关内容，其实和 <code>OrangeFox Recovery</code> 的固化脚本有几分相似，都会遍历 <code>a</code>, <code>b</code> 两个分区并执行相关操作，因此我们模仿 <code>OrangeFox Recovery</code> 的固化流程编写如下函数，其中输入参数就是 <code>boot.img</code> 的路径，代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCustomRecovery</span><span style="color:#E1E4E8;">(boot_image_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    magiskboot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.getenv(</span><span style="color:#9ECBFF;">&#39;CUSTOM_MAGISKBOOT&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    recovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.getenv(</span><span style="color:#9ECBFF;">&#39;CUSTOM_TWRP&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> magiskboot </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> recovery: </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    origin_pwd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.getcwd()</span></span>
<span class="line"><span style="color:#E1E4E8;">    new_pwd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(os.getcwd(), </span><span style="color:#9ECBFF;">&quot;tmp&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;mkdir&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-p&quot;</span><span style="color:#E1E4E8;">, new_pwd])</span></span>
<span class="line"><span style="color:#E1E4E8;">    os.chdir(new_pwd)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#9ECBFF;">&quot;unpack&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-n&quot;</span><span style="color:#E1E4E8;">, recovery])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(</span><span style="color:#9ECBFF;">&quot;ramdisk.cpio&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;rm&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-rf&quot;</span><span style="color:#E1E4E8;">, new_pwd])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        os.chdir(origin_pwd)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;cp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-f&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ramdisk.cpio&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ramdisk-ofrp.cpio&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;rm&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-f&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ramdisk.cpio&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;rm&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-f&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;kernel&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;dtb&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;kernel_dtb&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#9ECBFF;">&quot;unpack&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-h&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-n&quot;</span><span style="color:#E1E4E8;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;cp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-f&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ramdisk-ofrp.cpio&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ramdisk.cpio&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#9ECBFF;">&quot;repack&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-n&quot;</span><span style="color:#E1E4E8;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;mv&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-f&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;new-boot.img&quot;</span><span style="color:#E1E4E8;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([</span><span style="color:#9ECBFF;">&quot;rm&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-rf&quot;</span><span style="color:#E1E4E8;">, new_pwd])</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#9ECBFF;">&quot;cleanup&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    os.chdir(origin_pwd)</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCustomRecovery</span><span style="color:#24292E;">(boot_image_path):</span></span>
<span class="line"><span style="color:#24292E;">    magiskboot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.getenv(</span><span style="color:#032F62;">&#39;CUSTOM_MAGISKBOOT&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    recovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.getenv(</span><span style="color:#032F62;">&#39;CUSTOM_TWRP&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> magiskboot </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> recovery: </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    origin_pwd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.getcwd()</span></span>
<span class="line"><span style="color:#24292E;">    new_pwd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.join(os.getcwd(), </span><span style="color:#032F62;">&quot;tmp&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;mkdir&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-p&quot;</span><span style="color:#24292E;">, new_pwd])</span></span>
<span class="line"><span style="color:#24292E;">    os.chdir(new_pwd)</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#032F62;">&quot;unpack&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-n&quot;</span><span style="color:#24292E;">, recovery])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(</span><span style="color:#032F62;">&quot;ramdisk.cpio&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line highlighted"><span style="color:#24292E;">        common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;rm&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-rf&quot;</span><span style="color:#24292E;">, new_pwd])</span></span>
<span class="line highlighted"><span style="color:#24292E;">        os.chdir(origin_pwd)</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;cp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-f&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ramdisk.cpio&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ramdisk-ofrp.cpio&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;rm&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-f&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ramdisk.cpio&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;rm&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-f&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;kernel&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;dtb&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;kernel_dtb&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#032F62;">&quot;unpack&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-h&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-n&quot;</span><span style="color:#24292E;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;cp&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-f&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ramdisk-ofrp.cpio&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ramdisk.cpio&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#032F62;">&quot;repack&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-n&quot;</span><span style="color:#24292E;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;mv&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-f&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;new-boot.img&quot;</span><span style="color:#24292E;">, boot_image_path])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([</span><span style="color:#032F62;">&quot;rm&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-rf&quot;</span><span style="color:#24292E;">, new_pwd])</span></span>
<span class="line highlighted"><span style="color:#24292E;">    common.RunAndCheckOutput([magiskboot, </span><span style="color:#032F62;">&quot;cleanup&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    os.chdir(origin_pwd)</span></span></code></pre></div><p>可以看到高亮部分和 <code>OrangeFox Recovery</code> 的固化操作是一样的，均是解包、替换、重打包的操作。有了这个函数后，我们直接对原来的源码进行修改：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">boot_image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> has_boot:</span></span>
<span class="line"><span style="color:#E1E4E8;">    banner(</span><span style="color:#9ECBFF;">&quot;boot&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    boot_images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.info_dict.get(</span><span style="color:#9ECBFF;">&quot;boot_images&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> boot_images </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        boot_images </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;boot.img&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> index, b </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(boot_images.split()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        boot_image </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> common.GetBootableImage(</span><span style="color:#9ECBFF;">&quot;IMAGES/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b, b, </span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp, </span><span style="color:#9ECBFF;">&quot;BOOT&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> boot_image:</span></span>
<span class="line"><span style="color:#E1E4E8;">            boot_image_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(</span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp, </span><span style="color:#9ECBFF;">&quot;IMAGES&quot;</span><span style="color:#E1E4E8;">, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                partitions[</span><span style="color:#9ECBFF;">&#39;boot&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boot_image_path</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(boot_image_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">                boot_image.WriteToDir(</span><span style="color:#79B8FF;">OPTIONS</span><span style="color:#E1E4E8;">.input_tmp)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> output_zip:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    boot_image.AddToZip(output_zip)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        useCustomRecovery(boot_image_path)</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">boot_image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> has_boot:</span></span>
<span class="line"><span style="color:#24292E;">    banner(</span><span style="color:#032F62;">&quot;boot&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    boot_images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.info_dict.get(</span><span style="color:#032F62;">&quot;boot_images&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> boot_images </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        boot_images </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;boot.img&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, b </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(boot_images.split()):</span></span>
<span class="line"><span style="color:#24292E;">        boot_image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> common.GetBootableImage(</span><span style="color:#032F62;">&quot;IMAGES/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b, b, </span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp, </span><span style="color:#032F62;">&quot;BOOT&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> boot_image:</span></span>
<span class="line"><span style="color:#24292E;">            boot_image_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.join(</span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp, </span><span style="color:#032F62;">&quot;IMAGES&quot;</span><span style="color:#24292E;">, b)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                partitions[</span><span style="color:#032F62;">&#39;boot&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boot_image_path</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(boot_image_path):</span></span>
<span class="line"><span style="color:#24292E;">                boot_image.WriteToDir(</span><span style="color:#005CC5;">OPTIONS</span><span style="color:#24292E;">.input_tmp)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> output_zip:</span></span>
<span class="line"><span style="color:#24292E;">                    boot_image.AddToZip(output_zip)</span></span>
<span class="line highlighted"><span style="color:#24292E;">        useCustomRecovery(boot_image_path)</span></span></code></pre></div><p>别忘记将刚才的函数也加入到这个文件中，同时我们需要注意，在 <code>useCustomRecovery</code> 函数中我们需要读取两个环境变量:</p><ul><li><code>CUSTOM_MAGISKBOOT</code>: 用于解包的 <code>MagiskBoot</code> 工具的绝对路径;</li><li><code>CUSTOM_TWRP</code>: 我们需要打包进去的第三方 <code>Recovery</code></li></ul><h3 id="开放环境变量" tabindex="-1">开放环境变量 <a class="header-anchor" href="#开放环境变量" aria-label="Permalink to &quot;开放环境变量&quot;">​</a></h3><p>我们可以通过如下指令设定环境变量：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CUSTOM_MAGISKBOOT</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">指向您使用的</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MagiskBoot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">工具的绝对路</span><span style="color:#E1E4E8;">径</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CUSTOM_TWRP</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">指向您需要替换的</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Recovery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">镜像的绝对路</span><span style="color:#E1E4E8;">径</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CUSTOM_MAGISKBOOT</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">指向您使用的</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MagiskBoot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">工具的绝对路</span><span style="color:#24292E;">径</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CUSTOM_TWRP</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">指向您需要替换的</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Recovery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像的绝对路</span><span style="color:#24292E;">径</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>完成设定后，我们重新编译系统，发现还是没有打包到系统中。这是因为在编译过程中限制了环境变量的读取，只有特定的一些环境变量会被传入到编译流程中，所以我们还需要将我们自己新增的 <code>CUSTOM_MAGISKBOOT</code> 和 <code>CUSTOM_TWRP</code> 加入到白名单中。</p><p>对应需要修改的文件位置在 <code>build/soong/ui/build/ninja.go</code> 路径下，修改后的代码如下:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runNinjaForBuild</span><span style="color:#E1E4E8;">(ctx Context, config Config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其它代码</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cmd.Environment.</span><span style="color:#79B8FF;">IsEnvTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ALLOW_NINJA_ENV&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		ctx.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Allowing all environment variables during ninja; incremental builds may be unsafe.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		cmd.Environment.</span><span style="color:#79B8FF;">Allow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                其它参数</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;PYTHONDONTWRITEBYTECODE&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;TMPDIR&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;USER&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Custom TWRP</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;CUSTOM_MAGISKBOOT&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;CUSTOM_TWRP&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// TODO: remove these carefully</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// Options for the address sanitizer.</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;ASAN_OPTIONS&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                其它参数</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#E1E4E8;">		}, config.</span><span style="color:#79B8FF;">BuildBrokenNinjaUsesEnvVars</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其它代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runNinjaForBuild</span><span style="color:#24292E;">(ctx Context, config Config) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其它代码</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cmd.Environment.</span><span style="color:#005CC5;">IsEnvTrue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ALLOW_NINJA_ENV&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		ctx.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Allowing all environment variables during ninja; incremental builds may be unsafe.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		cmd.Environment.</span><span style="color:#005CC5;">Allow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">append</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                其它参数</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;PYTHONDONTWRITEBYTECODE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;TMPDIR&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;USER&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Custom TWRP</span></span>
<span class="line highlighted"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;CUSTOM_MAGISKBOOT&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;CUSTOM_TWRP&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// TODO: remove these carefully</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// Options for the address sanitizer.</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;ASAN_OPTIONS&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                其它参数</span></span>
<span class="line"><span style="color:#6A737D;">            */</span></span>
<span class="line"><span style="color:#24292E;">		}, config.</span><span style="color:#005CC5;">BuildBrokenNinjaUsesEnvVars</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其它代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>高亮部分就是我们的修改内容，我们只需要这样简单的将 <code>CUSTOM_MAGISKBOOT</code> 和 <code>CUSTOM_TWRP</code> 加入到白名单中，随后再重新开始编译即可，也就是说，您的编译流程现在为:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build/envsetup.sh</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CUSTOM_MAGISKBOOT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&lt;指向您使用的 MagiskBoot 工具的绝对路径&gt;&quot;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CUSTOM_TWRP</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&lt;指向您需要替换的 Recovery 镜像的绝对路径&gt;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">lunch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lineage_[设备代号]-userdebug</span></span>
<span class="line"><span style="color:#B392F0;">croot</span></span>
<span class="line"><span style="color:#B392F0;">mka</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bacon</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">source</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build/envsetup.sh</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CUSTOM_MAGISKBOOT</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&lt;指向您使用的 MagiskBoot 工具的绝对路径&gt;&quot;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CUSTOM_TWRP</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&lt;指向您需要替换的 Recovery 镜像的绝对路径&gt;&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">lunch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lineage_[设备代号]-userdebug</span></span>
<span class="line"><span style="color:#6F42C1;">croot</span></span>
<span class="line"><span style="color:#6F42C1;">mka</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bacon</span></span></code></pre></div><h2 id="git-补丁" tabindex="-1">Git 补丁 <a class="header-anchor" href="#git-补丁" aria-label="Permalink to &quot;Git 补丁&quot;">​</a></h2><p>同时，我制作了方便使用的 <code>Git</code> 补丁用以方便修改，可以进入 <a href="https://github.com/DogDayAndroid/Android-Builder/tree/main/System/Patches/LineageOS/custom_recovery" target="_blank" rel="noreferrer">DogDayAndroid/Android-Builder</a> 查看我的补丁。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://wiki.orangefox.tech/en/dev/building" target="_blank" rel="noreferrer">Building OrangeFox</a></li></ul>`,44),e=[l];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
