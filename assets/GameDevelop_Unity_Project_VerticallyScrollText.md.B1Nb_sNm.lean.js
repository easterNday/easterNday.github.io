import{$ as o,U as c,aq as t,S as a}from"./chunks/framework.B3hCfk8k.js";const S=JSON.parse('{"title":"ScrollRect 实现垂直滚动文字","description":"","frontmatter":{},"headers":[],"relativePath":"GameDevelop/Unity/Project/VerticallyScrollText.md","filePath":"GameDevelop/Unity/Project/VerticallyScrollText.md","lastUpdated":1708267512000}'),r={name:"GameDevelop/Unity/Project/VerticallyScrollText.md"};function l(d,e,n,i,s,h){return a(),c("div",null,e[0]||(e[0]=[t('<h1 id="scrollrect-实现垂直滚动文字" tabindex="-1">ScrollRect 实现垂直滚动文字 <a class="header-anchor" href="#scrollrect-实现垂直滚动文字" aria-label="Permalink to &quot;ScrollRect 实现垂直滚动文字&quot;">​</a></h1><p>在特定场景中，我们可能需要实现文字或图片的垂直滚动效果，这时 <code>Unity</code> 的 <code>UGUI</code> 组件 <code>ScrollRect</code> 就派上了用场。以下是利用 <code>ScrollRect</code> 实现垂直滚动文字的具体步骤：</p><h2 id="_1-控件布局" tabindex="-1">1. 控件布局 <a class="header-anchor" href="#_1-控件布局" aria-label="Permalink to &quot;1. 控件布局&quot;">​</a></h2><p>按照以下结构组织控件：<code>Panel</code>（添加 <code>ScrollRect</code> 组件）与 <code>ScrollBar</code> 同级，而 <code>Text</code> 作为 <code>Panel</code> 的子对象。</p><p><strong>注意：不从 <code>GameObject</code> 菜单创建 <code>ScrollView</code>，而是创建一个空的 <code>Panel</code> 并添加 <code>ScrollRect</code> 组件。</strong></p><h2 id="_2-配置-panel-组件" tabindex="-1">2. 配置 <code>Panel</code> 组件 <a class="header-anchor" href="#_2-配置-panel-组件" aria-label="Permalink to &quot;2. 配置 `Panel` 组件&quot;">​</a></h2><p>为 <code>Panel</code> 添加两个组件：</p><ul><li><strong>ScrollRect</strong>：负责实现滚动效果。将 <code>Content</code> 字段设置为 <code>Text</code>，表示 <code>Text</code> 是滚动内容显示区，并取消勾选 <code>Horizaontal</code>，仅保留 <code>Vertical</code> 以实现垂直滚动。</li><li><strong>Mask</strong>：提供遮罩功能，确保用户只能看到视口内的内容。</li></ul><h2 id="_3-配置-text-组件" tabindex="-1">3. 配置 <code>Text</code> 组件 <a class="header-anchor" href="#_3-配置-text-组件" aria-label="Permalink to &quot;3. 配置 `Text` 组件&quot;">​</a></h2><p>为 <code>Text</code> 添加 <strong>Content Size Filter</strong> 组件，由于是垂直滚动，只需设置 <code>Vertical Fit</code> 为 <code>perfect size</code>。</p><h2 id="_4-调整-text-组件的-recttransform" tabindex="-1">4. 调整 <code>Text</code> 组件的 <code>RectTransform</code> <a class="header-anchor" href="#_4-调整-text-组件的-recttransform" aria-label="Permalink to &quot;4. 调整 `Text` 组件的 `RectTransform`&quot;">​</a></h2><p>将 <code>Text</code> 的 <code>RectTransform</code> 里的 <code>Pivot</code> 设置为 <code>(0.5f, 1)</code>，确保文字长度变化时，控件始终保持顶端对齐。</p><h2 id="_5-设置滚动条" tabindex="-1">5. 设置滚动条 <a class="header-anchor" href="#_5-设置滚动条" aria-label="Permalink to &quot;5. 设置滚动条&quot;">​</a></h2><p>对于 <code>ScrollBar</code> 组件，<code>HandleRect</code> 和 <code>ColorTint</code> 中的 <code>TargetGraphic</code> 均应指向 <code>ScrollBar</code> 下的 <code>Handle</code> 对象。设置方向为 <code>BottomToTop</code>，确保滚动方向正确，其他选项根据实际需求调整。</p><h2 id="_6-关联-scrollbar-与-scrollrect" tabindex="-1">6. 关联 <code>ScrollBar</code> 与 <code>ScrollRect</code> <a class="header-anchor" href="#_6-关联-scrollbar-与-scrollrect" aria-label="Permalink to &quot;6. 关联 `ScrollBar` 与 `ScrollRect`&quot;">​</a></h2><p>返回到 <code>Panel</code> 对象上的 <code>ScrollRect</code> 组件，将 <code>Vertical ScrollBar</code> 字段设置为你所创建的 <code>ScrollBar</code> 组件。</p><p>经过以上步骤配置后，就可以通过 <code>ScrollRect</code> 实现 <code>Unity</code> 中的垂直滚动文字效果了。同时，虽然滚动条在手机端更多用于展示，但通过上述设置也可实现通过滚动条控制文字上下滑动的功能。</p>',17)]))}const x=o(r,[["render",l]]);export{S as __pageData,x as default};
