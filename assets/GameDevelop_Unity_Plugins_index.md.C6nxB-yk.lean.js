import{$ as a,U as t,aq as n,S as r}from"./chunks/framework.Dly07TnJ.js";const p=JSON.parse('{"title":"Unity 插件推荐","description":"","frontmatter":{},"headers":[],"relativePath":"GameDevelop/Unity/Plugins/index.md","filePath":"GameDevelop/Unity/Plugins/index.md","lastUpdated":1698484881000}'),i={name:"GameDevelop/Unity/Plugins/index.md"};function o(l,e,s,u,c,h){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="unity-插件推荐" tabindex="-1">Unity 插件推荐 <a class="header-anchor" href="#unity-插件推荐" aria-label="Permalink to &quot;Unity 插件推荐&quot;">​</a></h1><h2 id="unittask" tabindex="-1"><a href="https://github.com/Cysharp" target="_blank" rel="noreferrer">UnitTask</a> <a class="header-anchor" href="#unittask" aria-label="Permalink to &quot;[UnitTask](https://github.com/Cysharp)&quot;">​</a></h2><blockquote><p>如何通过 <a href="https://medium.com/@neuecc/extends-unitywebrequest-via-async-decorator-pattern-advanced-techniques-of-unitask-ceff9c5ee846" target="_blank" rel="noreferrer">Unity安装</a> 请参考官方文档。</p></blockquote><p>为 Unity 提供高效的无分配异步/等待集成。</p><ul><li>基于结构 UniTask&lt;T&gt; 和自定义 AsyncMethodBuilder 实现零分配</li><li>使所有 Unity AsyncOperations 和协程可等待</li><li>基于 PlayerLoop 的任务（UniTask.Yield, UniTask.Delay,UniTask.DelayFrame等..），可以替换所有协程操作</li><li>MonoBehaviour 消息事件和 uGUI 事件作为可等待/异步可枚举</li><li>完全在 Unity 的 PlayerLoop 上运行，因此不使用线程并在 WebGL、wasm 等上运行。</li><li>异步 LINQ，具有 Channel 和 AsyncReactiveProperty</li><li>TaskTracker窗口防止内存泄漏</li><li>与 Task/ValueTask/IValueTaskSource 高度兼容的行为</li></ul><p>有关技术细节，请参阅博客文章：<a href="https://medium.com/@neuecc/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd" target="_blank" rel="noreferrer">UniTask v2 — Unity 的零分配异步/等待，使用异步 LINQ</a></p><p>有关高级技巧，请参阅博客文章：<a href="https://medium.com/@neuecc/extends-unitywebrequest-via-async-decorator-pattern-advanced-techniques-of-unitask-ceff9c5ee846" target="_blank" rel="noreferrer">通过异步装饰器模式扩展 UnityWebRequest — UniTask 的高级技术</a></p><h2 id="xlua" tabindex="-1"><a href="https://github.com/Tencent/xLua" target="_blank" rel="noreferrer">XLua</a> <a class="header-anchor" href="#xlua" aria-label="Permalink to &quot;[XLua](https://github.com/Tencent/xLua)&quot;">​</a></h2><blockquote><p>具体使用请参考 <a href="https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/XLua%E6%95%99%E7%A8%8B.md" target="_blank" rel="noreferrer">官方文档</a></p></blockquote><p>xLua为Unity、 .Net、 Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用</p>',10)]))}const k=a(i,[["render",o]]);export{p as __pageData,k as default};
