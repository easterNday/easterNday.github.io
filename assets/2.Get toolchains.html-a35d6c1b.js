import{_ as o,M as r,p as l,q as s,R as e,t,N as a,a1 as i}from"./framework-96b046e1.js";const c={},d=e("h1",{id:"内核编译工具选取",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内核编译工具选取","aria-hidden":"true"},"#"),t(" 内核编译工具选取")],-1),h={href:"https://github.com/DogDayAndroid/KSU_Thyme_BuildBot",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"通过上一节的知识，我们已经获取到内核源码。",-1),p={href:"https://www.akr-developers.com/d/129",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.akr-developers.com/d/121",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/Neutron-Toolchains/clang-build-catalogue/blob/main/README.md",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"工具推荐",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#工具推荐","aria-hidden":"true"},"#"),t(" 工具推荐")],-1),m={href:"https://github.com/Neutron-Toolchains/clang-build-catalogue",target:"_blank",rel:"noopener noreferrer"},f=e("s",null,"因此无法保证完全的稳定性",-1),k={href:"https://gitea.com/Mandi-Sa/clang",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ClangBuiltLinux/tc-build",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"/proc/config.gz",-1),v={href:"https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+refs",target:"_blank",rel:"noopener noreferrer"},B={href:"https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/refs/heads/master",target:"_blank",rel:"noopener noreferrer"},M=i(`<h2 id="neutron-clang-使用介绍" tabindex="-1"><a class="header-anchor" href="#neutron-clang-使用介绍" aria-hidden="true">#</a> Neutron-Clang 使用介绍</h2><p>这是为内核开发构建的 LLVM 和 Clang 编译器工具链。构建始终是从最新的 LLVM 源代码而不是稳定版本构建的，因此不能保证完全的稳定性。目前该编译链工具使用 <code>AntMan</code> 来同步工具，具体使用方法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;<span class="token environment constant">$HOME</span>/toolchains/neutron-clang&quot;</span>
<span class="token builtin class-name">cd</span> <span class="token string">&quot;<span class="token environment constant">$HOME</span>/toolchains/neutron-clang&quot;</span>
<span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman&quot;</span><span class="token punctuation">)</span> <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些更多的 <code>AntMan</code> 命令：</p><table><thead><tr><th>功能</th><th>对应命令</th></tr></thead><tbody><tr><td>同步最新的工具链构建</td><td><code>./antman -S</code> 或 <code>./antman -S=latest</code></td></tr><tr><td>同步特定的工具链版本</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr><tr><td>检查更新</td><td><code>./antman -U</code></td></tr><tr><td>检查更新和同步更新</td><td><code>./antman -Uy</code></td></tr><tr><td>同步特定更新</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr><tr><td>删除同步构建</td><td><code>./antman -D</code></td></tr><tr><td>显示有关同步构建的信息</td><td><code>./antman -I</code></td></tr><tr><td>同步特定的工具链版本</td><td><code>./antman -S=&lt;release tag&gt;</code></td></tr></tbody></table><blockquote><p>如果需要更多细节介绍，请运行 <code>./antman --help</code> 获取。</p></blockquote><h2 id="clangbuiltlinux" tabindex="-1"><a class="header-anchor" href="#clangbuiltlinux" aria-hidden="true">#</a> ClangBuiltLinux</h2>`,7),w={href:"https://github.com/ClangBuiltLinux/tc-build",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,[t("诚然，自行编译确实是一件造轮子且费时费力的方法，但是通过这种方式编译出来的工具是最适合您的系统的，不会发生其他的编译中的关于 "),e("code",null,"glibc"),t(" 等方面的错误。")],-1),S=e("h2",{id:"阿菌•未霜-clang-llvm-toolchain-with-binutils",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#阿菌•未霜-clang-llvm-toolchain-with-binutils","aria-hidden":"true"},"#"),t(" 阿菌•未霜 Clang/LLVM Toolchain with Binutils")],-1),V=e("p",null,"这是一个预构建的工具链，构建始终来自最新的 LLVM 和 Binutils 源而不是稳定版本，因此无法保证完全的稳定性。它是用 Full LTO、PGO 和 BOLT 构建的，以尽可能减少编译时间。",-1),T=e("p",null,"其编译链工具存储在：",-1),q={href:"https://github.com/Mandi-Sa/clang",title:"GitHub",target:"_blank",rel:"noopener noreferrer"},N={href:"https://gitea.com/Mandi-Sa/clang",title:"Gitea",target:"_blank",rel:"noopener noreferrer"},E=e("h2",{id:"参考",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),t(" 参考")],-1),G={href:"https://www.akr-developers.com/d/129",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.akr-developers.com/d/121",target:"_blank",rel:"noopener noreferrer"};function A(y,D){const n=r("ExternalLinkIcon");return l(),s("div",null,[d,e("blockquote",null,[e("p",null,[t("本教程将基于小米 10S 的内核源码进行实例，其他型号的手机请自行寻找内核源码。具体内容可以参考我的"),e("a",h,[t("内核编译项目"),a(n)]),t("。")])]),u,e("p",null,[t("强烈推荐您学习"),e("a",p,[t("[内核向] 交叉编译器的选择"),a(n)]),t("以及"),e("a",_,[t("[白话文版] ClangBuiltLinux Clang 的使用"),a(n)]),t("来学习工具链的配置。")]),e("p",null,[t("同时可以配合"),e("a",g,[t("neutron-clang 的说明文档"),a(n)]),t("来进行编译参数配置。")]),b,e("ul",null,[e("li",null,[e("a",m,[t("neutron-clang"),a(n)]),t("：这是为内核开发构建的 LLVM 和 Clang 编译器工具链。构建始终是从最新的 LLVM 源代码而不是稳定版本构建的，"),f,t("。")]),e("li",null,[e("a",k,[t("阿菌•未霜 Clang/LLVM Toolchain with Binutils"),a(n)]),t("：这是一个预构建的工具链，构建始终来自最新的 LLVM 和 Binutils 源而不是稳定版本，因此无法保证完全的稳定性。它是用 Full LTO、PGO 和 BOLT 构建的，以尽可能减少编译时间。")]),e("li",null,[e("a",L,[t("ClangBuiltLinux/tc-build"),a(n)]),t("：类似前两个工具，但是这个工具需要自己在本地从 LLVM 的源码进行构建，但编译时间较长。")])]),e("p",null,[t("除此之外，一个比较保险的方法是从预编译内核机器的 "),x,t(" 提取`，需要对应版本的"),e("a",v,[t("交叉编译器"),a(n)]),t("以及 "),e("a",B,[t("Clang"),a(n)]),t("，自行选择合适版本下载即可，通过这种方式编译出来的内核一般是不会存在错误的。")]),M,e("p",null,[t("如果您想要使用这个工具链的话，那么其中的编译工具则需要你自行编译，对应的编译脚本为 "),e("a",w,[t("ClangBuiltLinux/tc-build"),a(n)]),t("。")]),C,S,V,T,e("ul",null,[e("li",null,[e("a",q,[t("GitHub"),a(n)]),t("：仅用于发布预构建的压缩文件（*.7z）")]),e("li",null,[e("a",N,[t("Gitea"),a(n)]),t("：仅用于存储预构建的二进制文件（Current AR Archive、ELF 64-bit LSB shared object 存储在 LFS）")])]),E,e("ul",null,[e("li",null,[e("a",G,[t("[内核向] 交叉编译器的选择"),a(n)])]),e("li",null,[e("a",O,[t("[白话文版] ClangBuiltLinux Clang 的使用"),a(n)])])])])}const H=o(c,[["render",A],["__file","2.Get toolchains.html.vue"]]);export{H as default};
