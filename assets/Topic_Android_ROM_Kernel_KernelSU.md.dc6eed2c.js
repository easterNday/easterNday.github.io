import{_ as e,o as r,c as a,a as l}from"./app.bdd32200.js";const f=JSON.parse('{"title":"KernelSU","description":"","frontmatter":{},"headers":[{"level":2,"title":"󰐩 前身","slug":"󰐩-前身","link":"#󰐩-前身","children":[]},{"level":2,"title":"󰩉 特性","slug":"󰩉-特性","link":"#󰩉-特性","children":[]},{"level":2,"title":" KernelSU 安装","slug":"-kernelsu-安装","link":"#-kernelsu-安装","children":[{"level":3,"title":"1. 检查您的设备是否被支持","slug":"_1-检查您的设备是否被支持","link":"#_1-检查您的设备是否被支持","children":[]},{"level":3,"title":"2. KMI 查看","slug":"_2-kmi-查看","link":"#_2-kmi-查看","children":[]},{"level":3,"title":"3. 安装","slug":"_3-安装","link":"#_3-安装","children":[]}]},{"level":2,"title":" 如何为非 GKI 内核集成 KernelSU","slug":"-如何为非-gki-内核集成-kernelsu","link":"#-如何为非-gki-内核集成-kernelsu","children":[]},{"level":2,"title":"󰎑 必备模块","slug":"󰎑-必备模块","link":"#󰎑-必备模块","children":[]},{"level":2,"title":" 参考","slug":"-参考","link":"#-参考","children":[]}],"relativePath":"Topic/Android/ROM/Kernel/KernelSU.md","lastUpdated":1687685751000}'),n={name:"Topic/Android/ROM/Kernel/KernelSU.md"},o=l(`<h1 id="kernelsu" tabindex="-1">KernelSU <a class="header-anchor" href="#kernelsu" aria-hidden="true">#</a></h1><p>顾名思义，<code>KernelSU</code> 就是基于内核的 <code>SU</code> 。它通过自定义内核，直接在内核中赋予目标进程 <code>Root</code> 权限。</p><h2 id="󰐩-前身" tabindex="-1">󰐩 前身 <a class="header-anchor" href="#󰐩-前身" aria-hidden="true">#</a></h2><p>大约 2018 年的时候，XDA 上的 <code>zx2c4</code> 就给出了一个 <a href="https://git.zx2c4.com/kernel-assisted-superuser/" target="_blank" rel="noreferrer">KernelSU 的简单实现</a>；虽然整个实现非常简单，但它的确给我们展示了另外一种可能。</p><p>后来，LSPosed 团队在实现 WSA 的 Magisk 方案的时候，也曾通过 <code>KernelSU</code> 来 root <a href="https://github.com/LSPosed/WSA-Kernel-SU" target="_blank" rel="noreferrer">WSA</a>。</p><p>在 <a href="https://source.android.com/docs/core/architecture/kernel/generic-kernel-image?hl=zh-cn" target="_blank" rel="noreferrer">GKI 2.0</a> 出现之前，各厂商的内核都是各自为战，因此内核碎片化严重，因此当时 <code>KernelSU</code> 并不能成为一个通用的 Root 方案。而随着 <a href="https://source.android.com/docs/core/architecture/kernel/generic-kernel-image?hl=zh-cn" target="_blank" rel="noreferrer">GKI 2.0</a> 的出现，内核逐渐在各个手机之间通用，使得 <code>KernelSU</code> 的推广也成为了可能。</p><h2 id="󰩉-特性" tabindex="-1">󰩉 特性 <a class="header-anchor" href="#󰩉-特性" aria-hidden="true">#</a></h2><ul><li>基于内核的 su 和权限管理。</li><li>基于 overlayfs 的模块系统。</li></ul><h2 id="-kernelsu-安装" tabindex="-1"> KernelSU 安装 <a class="header-anchor" href="#-kernelsu-安装" aria-hidden="true">#</a></h2><h3 id="_1-检查您的设备是否被支持" tabindex="-1">1. 检查您的设备是否被支持 <a class="header-anchor" href="#_1-检查您的设备是否被支持" aria-hidden="true">#</a></h3><p>从 <a href="https://github.com/tiann/KernelSU/releases" target="_blank" rel="noreferrer">GitHub Releases</a> 或 <a href="https://www.coolapk.com/apk/me.weishu.kernelsu" target="_blank" rel="noreferrer">酷安</a> 下载 <code>KernelSU</code> 管理器应用，然后将应用程序安装到设备并打开：</p><ul><li>如果应用程序显示 “不支持”，则表示您的设备不支持 <code>KernelSU</code>，你需要自己编译设备的内核才能使用，<code>KernelSU</code> 官方不会也永远不会为你提供一个可以刷写的 <code>boot</code> 镜像。</li><li>如果应用程序显示 “未安装”，那么 <code>KernelSU</code> 支持您的设备；可以进行下一步操作。</li></ul><blockquote><p>任何刷机操作都是有风险的，请务必做好备份。</p></blockquote><h3 id="_2-kmi-查看" tabindex="-1">2. KMI 查看 <a class="header-anchor" href="#_2-kmi-查看" aria-hidden="true">#</a></h3><p><code>KMI</code> 全称 <code>Kernel Module Interface</code>，相同 <code>KMI</code> 的内核版本是<strong>兼容的</strong> 这也是 <code>GKI</code> 中“通用”的含义所在；反之，如果 <code>KMI</code> 不同，那么这些内核之间无法互相兼容，刷入与你设备 <code>KMI</code> 不同的内核镜像可能会导致死机。</p><p>具体来说，对 <code>GKI</code> 的设备，其内核版本格式应该如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">KernelRelease</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:=</span></span>
<span class="line"><span style="color:#FFCB6B;">Version.PatchLevel.SubLevel-AndroidRelease-KmiGeneration-suffix</span></span>
<span class="line"><span style="color:#FFCB6B;">w</span><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">.x</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">.y</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">-zzz</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">-k</span><span style="color:#A6ACCD;">            </span><span style="color:#C3E88D;">-something</span></span>
<span class="line"></span></code></pre></div><p>其中，<code>w.x-zzz-k</code> 为 <code>KMI</code> 版本。例如，一个设备内核版本为<code>5.10.101-android12-9-g30979850fc20</code>，那么它的 KMI 为 <code>5.10-android12-9</code>；理论上刷入其他这个 <code>KMI</code> 的内核也能正常开机。</p><blockquote><p>请注意，内核版本中的 <code>SubLevel</code> 不属于 <code>KMI</code> 的范畴！也就是说 <code>5.10.101-android12-9-g30979850fc20</code> 与 <code>5.10.137-android12-9-g30979850fc20</code> 的 <code>KMI</code> 相同！(只看前两个版本号)</p><p>同时，内核版本与 Android 版本也并不一定相同。如果您发现您的内核版本是 <code>android12-5.10.101</code>，然而你 Android 系统的版本为 Android 13 或者其他这并不会影响什么。如果你需要刷机，请以内核版本为准。</p></blockquote><h3 id="_3-安装" tabindex="-1">3. 安装 <a class="header-anchor" href="#_3-安装" aria-hidden="true">#</a></h3><p>KernelSU 的安装方法有如下几种，各自适用于不同的场景，请按需选择：</p><ol><li>使用自定义 Recovery（如 TWRP）安装</li><li>使用内核刷写 App，如 （Franco Kernel Manager）安装</li><li>使用 KernelSU 提供的 boot.img 使用 fastboot 安装</li><li>手动修补 boot.img 然后安装</li></ol><p>具体操作过程可以查看<a href="https://kernelsu.org/zh_CN/guide/installation.html#%E5%AE%89%E8%A3%85%E4%BB%8B%E7%BB%8D" target="_blank" rel="noreferrer">官方文档</a>。</p><h2 id="-如何为非-gki-内核集成-kernelsu" tabindex="-1"> 如何为非 GKI 内核集成 KernelSU <a class="header-anchor" href="#-如何为非-gki-内核集成-kernelsu" aria-hidden="true">#</a></h2><p>请查阅<a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html" target="_blank" rel="noreferrer">官方文档</a>以及本博客中的<a href="/Topic/Android/ROM/Kernel/Compile">内核编译教程</a>。</p><p>一些现成的第三方 KernelSU 提供请查看<a href="https://kernelsu.org/zh_CN/guide/unofficially-support-devices.html#%E9%9D%9E%E5%AE%98%E6%96%B9%E6%94%AF%E6%8C%81%E8%AE%BE%E5%A4%87" target="_blank" rel="noreferrer">非官方支持设备</a>。</p><h2 id="󰎑-必备模块" tabindex="-1">󰎑 必备模块 <a class="header-anchor" href="#󰎑-必备模块" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/Dr-TSNG/ZygiskOnKernelSU" target="_blank" rel="noreferrer">ZygiskOnKernelSU</a>: 使用 <code>KernelSU</code> 运行 <code>Zygisk</code></li></ul><blockquote><p>刷入上面的模块后，其他常用模块直接刷入，部分模块可能存在问题。</p></blockquote><h2 id="-参考" tabindex="-1"> 参考 <a class="header-anchor" href="#-参考" aria-hidden="true">#</a></h2><ul><li><a href="https://kernelsu.org/zh_CN/guide/installation.html" target="_blank" rel="noreferrer">KernelSU 官网</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5Njg5ODU2NA==&amp;mid=2257499009&amp;idx=1&amp;sn=3cfce1ea7deb6e0e4f2ac170cffd7cc1&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">何为 Root？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5Njg5ODU2NA==&amp;mid=2257500703&amp;idx=1&amp;sn=31e8d32ee4ac1122764db58d320493c4&amp;chksm=a598287492efa1625dfc4ad932dee0f05d03acd834d7bd5b44daa657a1188aa5fc243fdf6329&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">KernelSU: 内核 ROOT 方案，来了！</a></li></ul>`,31),d=[o];function c(t,s,i,h,p,u){return r(),a("div",null,d)}const g=e(n,[["render",c]]);export{f as __pageData,g as default};
